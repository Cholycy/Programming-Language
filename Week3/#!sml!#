Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw3.sml";
[opening hw3.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- ConstructorP ("hi",TupleP[Variable "x",Variable "x"]);
val it = ConstructorP ("hi",TupleP [Variable #,Variable #]) : pattern
- check_pat ConstructorP ("hi",TupleP[Variable "x",Variable "x"]);
stdIn:3.1-3.64 Error: operator and operand don't agree [tycon mismatch]
  operator domain: pattern
  operand:         string * pattern -> pattern
  in expression:
    check_pat ConstructorP
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:86.5-107.8 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  bool
  result type:  string list
  in declaration:
    check_pat = (fn pat => let val <binding> in let <dec> in <exp> end end)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:102.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- check_pat ConstructorP ("hi",TupleP[Variable "x",Variable "x"]);
stdIn:5.1-5.64 Error: operator and operand don't agree [tycon mismatch]
  operator domain: pattern
  operand:         string * pattern -> pattern
  in expression:
    check_pat ConstructorP
- check_pat ConstructorP("hi",TupleP[Variable "x",Variable "x"]);
stdIn:1.2-5.33 Error: operator and operand don't agree [tycon mismatch]
  operator domain: pattern
  operand:         string * pattern -> pattern
  in expression:
    check_pat ConstructorP
- val test10b = check_pat (ConstructorP("hi",TupleP[Variable "x",Variable "x"]);) = false;
= ;
stdIn:5.49-5.52 Error: syntax error: deleting  RPAREN EQUALOP
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:102.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- check_pat (ConstructorP("hi",TupleP[Variable "x",Variable "x"]));
val it = false : bool
- check_pat (ConstructorP("hi",TupleP[Variable "x",ConstructorP ("yo",TupleP[Variable "x",UnitP])]));
val it = false : bool
- match (Const 17,ConstP 4);
val it = SOME [] : (string * valu) list option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:102.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- match (Const 17,ConstP 4);
val it = NONE : (string * valu) list option
- match (Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4),Constructor ("egg",Constructor ("egg",Const 4))],TupleP[Wildcard,Wildcard]);
val it = SOME [] : (string * valu) list option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:117.48-117.57 Error: unbound structure: vs in path vs.length
hw3.sml:117.38-117.47 Error: unbound structure: ps in path ps.length
val it = () : unit
- val m = [1,2,3];
val m = [1,2,3] : int list
- m.Length;
stdIn:15.1-15.9 Error: unbound structure: m in path m.Length
- Length m;
stdIn:1.2-1.8 Error: unbound variable or constructor: Length
- List.length m;
val it = 3 : int
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:102.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- match (Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4),Constructor ("egg",Constructor ("egg",Const 4))],TupleP[Wildcard,Wildcard]);
val it = NONE : (string * valu) list option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:102.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- all_answers (fn x => if x = 1 then SOME [x] else NONE) [];
val it = SOME [] : int list option
- all_answers (fn x => if x = 1 then SOME [x] else NONE) [2,3];
val it = NONE : int list option
- all_answers (fn x => if x = 2 then SOME [x] else NONE) [2,3];
val it = NONE : int list option
- all_answers (fn x => if x >= 2 then SOME [x] else NONE) [2,3];
val it = SOME [2,3] : int list option
- all_answers;
val it = fn : ('a -> 'b list option) -> 'a list -> 'b list option
- TupleT;
val it = fn : typ list -> typ
- TupleT(Anything, Anything);
stdIn:25.1-25.27 Error: operator and operand don't agree [tycon mismatch]
  operator domain: typ list
  operand:         typ * typ
  in expression:
    TupleT (Anything,Anything)
- TupleT[Anything, Anything];
val it = TupleT [Anything,Anything] : typ
- val x = TupleT[Anything, Anything];
val x = TupleT [Anything,Anything] : typ
- x @ [Anything]
= ;
stdIn:27.1-27.15 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list * 'Z list
  operand:         typ * typ list
  in expression:
    x @ Anything :: nil
- x @ [Anything];
stdIn:1.2-1.16 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list * 'Z list
  operand:         typ * typ list
  in expression:
    x @ Anything :: nil
- valof x;
stdIn:1.2-1.7 Error: unbound variable or constructor: valof
- TupleT[];
val it = TupleT [] : typ
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:161.5-168.18 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ
  this rule: pattern -> valu
  in rule:
    UnitP => Unit
hw3.sml:165.21-165.27 Error: operator is not a function [tycon mismatch]
  operator: typ
  in expression:
    IntT p
hw3.sml:161.5-168.18 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ
  this rule: pattern -> typ list
  in rule:
    ConstructorP (s1,p) => type_map p
hw3.sml:161.5-168.18 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ
  this rule: pattern -> 'Z option
  in rule:
    _ => NONE
hw3.sml:160.5-168.18 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ
  result type:  typ list
  in declaration:
    type_map =
      (fn pat =>
            (case pat
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:161.5-167.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ
  this rule: pattern -> valu
  in rule:
    UnitP => Unit
hw3.sml:165.21-165.27 Error: operator is not a function [tycon mismatch]
  operator: typ
  in expression:
    IntT p
hw3.sml:161.5-167.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ
  this rule: pattern -> typ list
  in rule:
    ConstructorP (s1,p) => type_map p
hw3.sml:160.5-167.42 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ
  result type:  typ list
  in declaration:
    type_map =
      (fn pat =>
            (case pat
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:161.5-167.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ
  this rule: pattern -> typ list -> typ
  in rule:
    TupleP ps => TupleT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:161.5-167.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ
  this rule: pattern -> typ list
  in rule:
    ConstructorP (s1,p) => type_map p
hw3.sml:160.5-167.42 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ
  result type:  typ list
  in declaration:
    type_map =
      (fn pat =>
            (case pat
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- TupleP;
val it = fn : pattern list -> pattern
- TupleT;
val it = fn : typ list -> typ
- match;
val it = fn : valu * pattern -> (string * valu) list option
- use"hw3.sml";
[opening hw3.sml]
hw3.sml:109.5-122.8 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match = (fn (vu,pat) => let val <binding> in matchcase <exp> end)
val it = () : unit
- use"hw3.sml";
[opening hw3.sml]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val first_match = fn
  : ?.valu -> ?.pattern list -> (string * ?.valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use"hw3.sml";
[opening hw3.sml]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val first_match = fn
  : ?.valu -> ?.pattern list -> (string * ?.valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use"hw3.sml";
[opening hw3.sml]
hw3.sml:109.5-122.8 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match = (fn (vu,pat) => let val <binding> in matchcase <exp> end)
hw3.sml:147.12-149.34 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z * 'Y) list
  operand:         'X list * 'W list -> ('X * 'W) list
  in expression:
    (all_answers type_lenient) ListPair.zip
val it = () : unit
- use"hw3.sml";
[opening hw3.sml]
hw3.sml:109.5-122.8 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match = (fn (vu,pat) => let val <binding> in matchcase <exp> end)
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw3.sml";
[opening hw3.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw3.sml:109.5-122.8 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match = (fn (vu,pat) => let val <binding> in matchcase <exp> end)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:110.6-117.24 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): valu * pattern -> (string * valu) list option
  this rule: valu * pattern -> (string * valu) option
  in rule:
    (Constructor (s2,v),ConstructorP (s1,p)) =>
      if s2 = s1 then match (v,p) else NONE
hw3.sml:109.5-117.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match =
      (fn (vu,pat) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:110.6-117.24 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): valu * pattern -> (string * valu) list option
  this rule: valu * pattern -> (string * valu) option
  in rule:
    (Constructor (s1,v),ConstructorP (s2,p)) =>
      if s1 = s2 then match (v,p) else NONE
hw3.sml:109.5-117.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match =
      (fn (vu,pat) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:110.6-117.24 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): valu * pattern -> (string * valu) list option
  this rule: valu * pattern -> (string * valu) option
  in rule:
    (Constructor (s1,v),ConstructorP (s2,p)) =>
      if s1 = s2 then match (v,p) else NONE
hw3.sml:109.5-117.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match =
      (fn (vu,pat) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:109.5-117.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match =
      (fn (vu,pat) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- val x = [1,2,3];
val x = [1,2,3] : int list
- val y = ["a", "b", "c"];
val y = ["a","b","c"] : string list
- ListPair.zeip (x, y);
stdIn:10.1-10.14 Error: unbound variable or constructor: zeip in path ListPair.zeip
- ListPair.zip (x, y);
val it = [(1,"a"),(2,"b"),(3,"c")] : (int * string) list
- match it;
stdIn:11.1-11.9 Error: operator and operand don't agree [tycon mismatch]
  operator domain: valu * pattern
  operand:         (int * string) list
  in expression:
    match it
- all_answers match it;
stdIn:1.2-2.6 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (valu * pattern) list
  operand:         (int * string) list
  in expression:
    (all_answers match) it
- all_answers match ListPair.zip(x, y);
stdIn:1.2-11.16 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (valu * pattern) list
  operand:         'Z list * 'Y list -> ('Z * 'Y) list
  in expression:
    (all_answers match) ListPair.zip
- all_answers match(ListPair.zip(x, y));
stdIn:1.2-11.17 Error: operator and operand don't agree [tycon mismatch]
  operator domain: (valu * pattern) list
  operand:         (int * string) list
  in expression:
    (all_answers match) (ListPair.zip (x,y))
- all_answers(match ListPair.zip(x, y));
stdIn:1.14-11.16 Error: operator and operand don't agree [tycon mismatch]
  operator domain: valu * pattern
  operand:         'Z list * 'Y list -> ('Z * 'Y) list
  in expression:
    match ListPair.zip
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:115.87-115.115 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z * 'Y
  operand:         (valu * pattern) list
  in expression:
    match (ListPair.zip (vs,ps))
hw3.sml:115.35-115.126 Error: types of if branches do not agree [tycon mismatch]
  then branch: _ list -> _ list option
  else branch: 'Z option
  in expression:
    if List.length vs = List.length ps
    then all_answers (match (ListPair.zip (<exp>,<exp>)))
    else NONE
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:115.105 Error: syntax error: inserting  LPAREN

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:110.6-117.24 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): valu * pattern -> (string * valu) list option
  this rule: valu * pattern -> (string * valu) option
  in rule:
    (Constructor (s1,v),ConstructorP (s2,p)) =>
      if s1 = s2 then match (v,p) else NONE
hw3.sml:109.5-117.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match =
      (fn (vu,pat) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- all_answers;
val it = fn : ('a -> 'b option) -> 'a list -> 'b list option
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw3.sml";
[opening hw3.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw3.sml:110.6-117.24 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): valu * pattern -> (string * valu) list option
  this rule: valu * pattern -> (string * valu) option
  in rule:
    (Constructor (s1,v),ConstructorP (s2,p)) =>
      if s1 = s2 then match (v,p) else NONE
hw3.sml:109.5-117.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match =
      (fn (vu,pat) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:110.6-117.24 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): valu * pattern -> (string * valu) list option
  this rule: valu * pattern -> (string * valu) option
  in rule:
    (Constructor (s1,v),ConstructorP (s2,p)) =>
      if s1 = s2 then match (v,p) else NONE
hw3.sml:109.5-117.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match =
      (fn (vu,pat) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:109.5-117.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) option
  in declaration:
    match =
      (fn (vu,pat) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- all_answers match;
val it = fn : (valu * pattern) list -> (string * valu) list list option
- all_answers match [];
val it = SOME [] : (string * valu) list list option
- all_answers match [];
val it = SOME [] : (string * valu) list list option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:116.46 Error: syntax error: inserting  LPAREN

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:116.11-119.24 Error: case object and rules don't agree [tycon mismatch]
  rule domain: 'Z option option
  object: 'Y list option
  in expression:
    (case ((all_answers match) (ListPair.zip (vs,ps)))
      of SOME v => v
       | _ => NONE)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:116.11-119.27 Warning: match nonexhaustive
          SOME (v :: nil) => ...
          NONE => ...
  
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:116.11-120.33 Warning: match nonexhaustive
          SOME (v :: nil) => ...
          NONE => ...
          SOME nil => ...
  
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:116.23 Error: syntax error: inserting  ORELSE

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:116.11-120.35 Error: match redundant and nonexhaustive
          SOME (v :: nil) => ...
          NONE => ...
          SOME nil => ...
    -->   SOME (nil :: nil) => ...
  
hw3.sml:101.43 Warning: calling polyEqual
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:116.11-119.33 Warning: match nonexhaustive
          SOME (v :: nil) => ...
          NONE => ...
          SOME nil => ...
  
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:167.42 Error: unmatched close comment

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:148.12-150.34 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z * 'Y) list
  operand:         'X list * 'W list -> ('X * 'W) list
  in expression:
    (all_answers type_lenient) ListPair.zip
hw3.sml:166.71 Error: unbound variable or constructor: i
hw3.sml:161.5-167.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ option
  this rule: pattern -> typ
  in rule:
    TupleP ps => TupleT (((List.foldl <exp>) nil) ps)
hw3.sml:161.5-167.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ option
  this rule: pattern -> _ list
  in rule:
    ConstructorP (s1,p) => type_map p
hw3.sml:160.5-167.42 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ option
  result type:  _ list
  in declaration:
    type_map =
      (fn pat =>
            (case pat
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:148.30-148.63 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z * 'Y
  operand:         'X list * 'W list -> ('X * 'W) list
  in expression:
    type_lenient ListPair.zip
hw3.sml:148.12-150.34 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ list option
  object: _ list -> _ list option
  in expression:
    (case (all_answers ((type_lenient ListPair.zip) (p1,p2)))
      of NONE => NONE
       | SOME t => SOME (TupleT t))
hw3.sml:166.71 Error: unbound variable or constructor: i
hw3.sml:161.5-167.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ option
  this rule: pattern -> typ
  in rule:
    TupleP ps => TupleT (((List.foldl <exp>) nil) ps)
hw3.sml:161.5-167.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ option
  this rule: pattern -> _ list
  in rule:
    ConstructorP (s1,p) => type_map p
hw3.sml:160.5-167.42 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ option
  result type:  _ list
  in declaration:
    type_map =
      (fn pat =>
            (case pat
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw3.sml";
[opening hw3.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:101.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- all_answers (fn x => if x = 1 then SOME [x] else NONE) [2,3,4,5,6,7];
val it = NONE : int list list option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:41.13-41.15 Error: syntax error: replacing  OF with  EQUALOP
hw3.sml:49.6 Error: syntax error: inserting  LET
hw3.sml:173.1 Error: syntax error found at EOF

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:43.15 Error: unbound variable or constructor: x
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:100.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'c list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:100.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'c list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:100.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:109.6-121.24 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): valu * pattern -> (string * valu) list option
  this rule: valu * pattern -> (string * valu) list list option
  in rule:
    (Constructor (s1,v),ConstructorP (s2,p)) =>
      if s1 = s2 then match (v,p) else NONE
hw3.sml:108.5-121.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) list list option
  in declaration:
    match =
      (fn (vu,pat) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:100.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw3.sml";
[opening hw3.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw3.sml:100.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:100.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val all_answers2 = fn : ('a -> 'b list option) -> 'a list -> 'b list option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:49.3-49.22 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list
  operand:         'Y * 'X list
  in expression:
    get_answer (xs,nil)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:47.18-47.40 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z * 'Y
  operand:         'X list
  in expression:
    get_answer xs'
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:100.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val all_answers2 = fn : ('a -> 'b list option) -> 'a list -> 'b list option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:41.23 Error: syntax error: replacing  COMMA with  DOT
hw3.sml:46.32 Error: syntax error: replacing  COMMA with  EQUALOP

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:44.20-46.36 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z list option -> 'Y option
  this rule: 'Z list option -> 'Z list
  in rule:
    SOME v => (get_answer xs') l @ v
hw3.sml:41.10-46.36 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  'Z -> 'Z option
  result type:  'Z -> 'Y list
  in declaration:
    get_answer = (fn arg => (fn <pat> => <exp>))
hw3.sml:114.11-117.27 Error: case object and rules don't agree [tycon mismatch]
  rule domain: 'Z list list option
  object: 'Y list
  in expression:
    (case ((all_answers match) (ListPair.zip (vs,ps)))
      of SOME (v :: nil) => SOME v
       | NONE => NONE
       | _ => SOME nil)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:108.6-120.24 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): valu * pattern -> (string * valu) list option
  this rule: valu * pattern -> (string * valu) list list option
  in rule:
    (Constructor (s1,v),ConstructorP (s2,p)) =>
      if s1 = s2 then match (v,p) else NONE
hw3.sml:107.5-120.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  (string * valu) list option
  result type:  (string * valu) list list option
  in declaration:
    match =
      (fn (vu,pat) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val all_answers2 = fn : ('a -> 'b list option) -> 'a list -> 'b list option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:143.12-145.34 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z * 'Y) list
  operand:         'X list * 'W list -> ('X * 'W) list
  in expression:
    (all_answers type_lenient) ListPair.zip
hw3.sml:136.5-149.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ option
  result type:  'Z list option
  in declaration:
    type_lenient =
      (fn (t1,t2) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
hw3.sml:161.71 Error: unbound variable or constructor: i
hw3.sml:156.5-162.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ option
  this rule: pattern -> typ
  in rule:
    TupleP ps => TupleT (((List.foldl <exp>) nil) ps)
hw3.sml:156.5-162.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ option
  this rule: pattern -> _ list
  in rule:
    ConstructorP (s1,p) => type_map p
hw3.sml:155.5-162.42 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ option
  result type:  _ list
  in declaration:
    type_map =
      (fn pat =>
            (case pat
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:143.12-145.34 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z * 'Y) list
  operand:         'X list * 'W list -> ('X * 'W) list
  in expression:
    (all_answers type_lenient) ListPair.zip
hw3.sml:136.5-149.24 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ option
  result type:  'Z list option
  in declaration:
    type_lenient =
      (fn (t1,t2) =>
            (case (<exp>,<exp>)
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
hw3.sml:161.71 Error: unbound variable or constructor: i
hw3.sml:156.5-162.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ option
  this rule: pattern -> typ
  in rule:
    TupleP ps => TupleT (((List.foldl <exp>) nil) ps)
hw3.sml:156.5-162.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ option
  this rule: pattern -> _ list
  in rule:
    ConstructorP (s1,p) => type_map p
hw3.sml:155.5-162.42 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ option
  result type:  _ list
  in declaration:
    type_map =
      (fn pat =>
            (case pat
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:234.39-234.51 Error: unbound variable or constructor: type_lenient
hw3.sml:234.69-234.71 Error: unbound variable or constructor: p2
hw3.sml:234.65-234.67 Error: unbound variable or constructor: p1
hw3.sml:234.22-237.42 Error: operator and operand don't agree [tycon mismatch]
  operator domain: _ list
  operand:         'Z list * 'Y list -> ('Z * 'Y) list
  in expression:
    (all_answers <errorvar>) ListPair.zip
hw3.sml:234.22-237.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ list option -> typ option
  this rule: pattern -> 'Z
  in rule:
    ConstructorP (s1,p) => type_map p
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:200.37 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val typecheck_patterns = fn
  : (string * string * typ) list * pattern list -> typ option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw3.sml";
[opening hw3.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:141.7 Error: syntax error: replacing  BAR with  OP

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:140.5-149.17 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): pattern -> typ
  this rule: pattern -> typ option
  in rule:
    TupleP ps =>
      (case ((all_answers convert) ps)
        of NONE => NONE
         | SOME lst => SOME (TupleT <exp>)
         | _ => NONE)
hw3.sml:139.5-149.17 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ
  result type:  typ list option
  in declaration:
    convert =
      (fn patlist =>
            (case patlist
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:139.5-149.17 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ option
  result type:  typ list option
  in declaration:
    convert =
      (fn patlist =>
            (case patlist
              of <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>
               | <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:156.22-160.17 Error: match redundant
          NONE => ...
          SOME lst => ...
    -->   _ => ...
  
hw3.sml:151.5-160.17 Warning: match nonexhaustive
          Wildcard => ...
          Variable s => ...
          UnitP => ...
          ConstP c => ...
          TupleP ps => ...
  
hw3.sml:99.43 Warning: calling polyEqual
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val all_answers2 = fn : 'a -> 'b list -> 'c option
val convert = fn : pattern -> typ option
val it = () : unit
- convert (TupleP([Variable("x"), Variable("x"),Wildcard, Wildcard]));
val it = NONE : typ option
- convert (TupleP([Variable("x")]));
val it = NONE : typ option
- allansers2 convert (TupleP([Variable("x")]));
stdIn:8.1-8.11 Error: unbound variable or constructor: allansers2
- all_answers2 convert (TupleP([Variable("x")]));
stdIn:1.2-5.2 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list
  operand:         pattern
  in expression:
    (all_answers2 convert) (TupleP (Variable "x" :: nil))
- convert [Wildcard];
stdIn:1.2-3.4 Error: operator and operand don't agree [tycon mismatch]
  operator domain: pattern
  operand:         pattern list
  in expression:
    convert (Wildcard :: nil)
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val all_answers2 = fn : 'a -> 'b list -> 'c option
val convert = fn : pattern -> typ option
val it = () : unit
- convert Wildcard;
val it = SOME Anything : typ option
- convert Variable("x");
stdIn:10.1-10.22 Error: operator and operand don't agree [tycon mismatch]
  operator domain: pattern
  operand:         string -> pattern
  in expression:
    convert Variable
- convert (Variable "x");
val it = SOME Anything : typ option
- convert TupleP ([Variable("x")]);
stdIn:11.1-11.33 Error: operator and operand don't agree [tycon mismatch]
  operator domain: pattern
  operand:         pattern list -> pattern
  in expression:
    convert TupleP
- convert (TupleP ([Variable("x")]));
val it = NONE : typ option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:158.23-160.39 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ list option
  object: pattern list option
  in expression:
    (case ((all_answers2 convert) ps)
      of NONE => NONE
       | SOME lst => SOME (TupleT lst))
val it = () : unit
- all_answers2 convert
= ;
stdIn:13.1-13.21 Warning: type vars not generalized because of
   value restriction are instantiated to dummy types (X1,X2,...)
val it = fn : ?.X1 list -> ?.X2 option
- all_answers2 convert;
stdIn:15.1-15.21 Warning: type vars not generalized because of
   value restriction are instantiated to dummy types (X1,X2,...)
val it = fn : ?.X1 list -> ?.X2 option
- val x = [Wildcard];
val x = [Wildcard] : pattern list
- all_answers2 convert x;
stdIn:17.1-17.23 Warning: type vars not generalized because of
   value restriction are instantiated to dummy types (X1,X2,...)
val it = NONE : ?.X1 option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val all_answers2 = fn : ('a -> 'b option) -> 'a list -> 'b list option
val convert = fn : pattern -> typ option
val it = () : unit
- convert TupleP ([Variable("x")]);
stdIn:19.1-19.33 Error: operator and operand don't agree [tycon mismatch]
  operator domain: pattern
  operand:         pattern list -> pattern
  in expression:
    convert TupleP
- convert (TupleP ([Variable("x")]));
val it = SOME (TupleT [Anything]) : typ option
- convert (TupleP ([Variable("x")]));
val it = SOME (TupleT [Anything]) : typ option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:160.5 Error: syntax error: inserting  LOCAL
hw3.sml:269.1 Error: syntax error found at EOF

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:155.19-155.25 Error: data constructor TupleT used without argument in pattern
hw3.sml:155.11-155.17 Error: data constructor TupleT used without argument in pattern
hw3.sml:151.6-157.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ * typ -> typ
  this rule: typ * typ -> typ list -> typ
  in rule:
    (_,_) => TupleT
hw3.sml:156.40-156.75 Error: types of if branches do not agree [tycon mismatch]
  then branch: typ
  else branch: 'Z option
  in expression:
    if d1 = d2 then Datatype d1 else NONE
hw3.sml:151.6-157.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ * typ -> typ
  this rule: typ * typ -> 'Z option
  in rule:
    _ => NONE
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:156.40-156.75 Error: types of if branches do not agree [tycon mismatch]
  then branch: typ
  else branch: 'Z option
  in expression:
    if d1 = d2 then Datatype d1 else NONE
hw3.sml:151.6-157.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ * typ -> typ
  this rule: typ * typ -> 'Z option
  in rule:
    _ => NONE
hw3.sml:150.5-157.19 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ * typ
  object: typ list * 'Z
  in expression:
    (case (arg,arg)
      of (t1,t2) =>
           (case (t1,t2)
             of (<pat>,<pat>) => Anything
              | (<pat>,<pat>) => UnitT
              | (<pat>,<pat>) => IntT
              | (<pat>,<pat>) => <exp> <exp>
              | (<pat>,<pat>) => if <exp> then <exp> else <exp>
              | _ => NONE))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:155.38-160.19 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list
  operand:         typ list * typ list
  in expression:
    (all_answers2 type_lenient) (tt1,tt2)
hw3.sml:155.38-160.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ list option -> typ option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
hw3.sml:150.5-160.19 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  typ -> typ option
  result type:  'Z option
  in declaration:
    type_lenient = (fn arg => (fn <pat> => <exp>))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:155.38-160.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ list option -> typ option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
hw3.sml:150.5-160.19 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ * typ
  object: (typ list * typ list) * 'Z
  in expression:
    (case (arg,arg)
      of (t1,t2) =>
           (case (t1,t2)
             of (<pat>,<pat>) => SOME <exp>
              | (<pat>,<pat>) => SOME <exp>
              | (<pat>,<pat>) => SOME <exp>
              | (<pat>,<pat>) =>
                  (case <exp>
                    of <rule>
                     | <rule>
                     | <rule>
                     | <rule>)))
hw3.sml:150.5-160.19 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  'Z -> _
  result type:  typ list option
  in declaration:
    type_lenient = (fn arg => (fn <pat> => <exp>))
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw3.sml"
= ;
[opening hw3.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw3.sml:156.25-156.40 Error: operator and operand don't agree [tycon mismatch]
  operator domain: typ list
  operand:         typ
  in expression:
    TupleT Anything
hw3.sml:159.26-159.65 Error: operator and operand don't agree [circularity]
  operator domain: 'Z
  operand:         'Y -> 'Z -> 'X
  in expression:
    (type_lenient l) type_lenient
hw3.sml:157.40-161.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): _ option -> _ option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:156.25-156.40 Error: operator and operand don't agree [tycon mismatch]
  operator domain: typ list
  operand:         typ
  in expression:
    TupleT Anything
hw3.sml:159.26-159.65 Error: operator and operand don't agree [circularity]
  operator domain: 'Z
  operand:         'Y -> 'Z -> 'X
  in expression:
    (type_lenient l) type_lenient
hw3.sml:157.40-161.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): _ option -> _ option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:159.26-159.65 Error: operator and operand don't agree [circularity]
  operator domain: 'Z
  operand:         'Y -> 'Z -> 'X
  in expression:
    (type_lenient l) type_lenient
hw3.sml:157.40-161.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): _ option -> _ option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:159.38-159.66 Error: operator and operand don't agree [circularity]
  operator domain: 'Z
  operand:         'Z list * 'Y list
  in expression:
    type_lenient (tt1',tt2')
hw3.sml:157.40-161.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z option -> 'Y option
  this rule: 'Z option -> 'X -> 'W
  in rule:
    SOME l => type_lenient (l,type_lenient (<exp>,<exp>))
hw3.sml:157.40-161.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z option -> 'Y option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
hw3.sml:155.38-161.19 Error: case object and rules don't agree [tycon mismatch]
  rule domain: ('Z * _) list * 'Y list
  object: typ list * typ list
  in expression:
    (case (tt1,tt2)
      of (nil,nil) => SOME Anything
       | (:: (<pat>,<pat>),:: (<pat>,<pat>)) =>
           (case ((type_lenient <exp>) t20)
             of NONE => NONE
              | SOME <pat> => type_lenient <exp>
              | (<pat>,<pat>) => if <exp> then <exp> else <exp>
              | _ => NONE))
hw3.sml:150.5-161.19 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ * typ
  object: ('Z * _) * 'Y
  in expression:
    (case (arg,arg)
      of (t1,t2) =>
           (case (t1,t2)
             of (<pat>,<pat>) => SOME <exp>
              | (<pat>,<pat>) => SOME <exp>
              | (<pat>,<pat>) => SOME <exp>
              | (<pat>,<pat>) =>
                  (case <exp>
                    of <rule>
                     | <rule>)))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:159.26-163.19 Error: operator and operand don't agree [circularity]
  operator domain: 'Z
  operand:         'Z list * 'Y list
  in expression:
    type_lenient (tt1',tt2')
hw3.sml:159.26-163.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z option -> 'Y option
  this rule: 'Z option -> 'X -> 'W
  in rule:
    SOME l' => type_lenient (l,l')
hw3.sml:159.26-163.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z option -> 'Y option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
hw3.sml:155.38-163.19 Error: case object and rules don't agree [tycon mismatch]
  rule domain: ('Z * _) list * 'Y list
  object: typ list * typ list
  in expression:
    (case (tt1,tt2)
      of (nil,nil) => SOME Anything
       | (:: (<pat>,<pat>),:: (<pat>,<pat>)) =>
           (case ((type_lenient <exp>) t20)
             of NONE => NONE
              | SOME <pat> =>
                  (case <exp>
                    of <rule>
                     | <rule>
                     | <rule>
                     | <rule>)))
hw3.sml:150.5-163.19 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ * typ
  object: ('Z * _) * 'Y
  in expression:
    (case (arg,arg)
      of (t1,t2) =>
           (case (t1,t2)
             of (<pat>,<pat>) => SOME <exp>
              | (<pat>,<pat>) => SOME <exp>
              | (<pat>,<pat>) => SOME <exp>
              | (<pat>,<pat>) =>
                  (case <exp>
                    of <rule>
                     | <rule>)))
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:157.40-163.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z option -> 'Z option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:151.6-163.19 Error: match redundant
          (_,Antything) => ...
    -->   (UnitT,UnitT) => ...
    -->   (IntT,IntT) => ...
    -->   (Datatype d1,Datatype d2) => ...
    -->   _ => ...
  
hw3.sml:99.43 Warning: calling polyEqual
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val all_answers2 = fn : ('a -> 'b option) -> 'a list -> 'b list option
val type_lenient = fn : typ -> typ -> typ option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:159.26-163.19 Error: operator and operand don't agree [circularity]
  operator domain: 'Z * 'Y
  operand:         'Z list * 'Y list
  in expression:
    type_lenient (tt1',tt2')
hw3.sml:159.26-163.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z option -> 'Y option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:157.40-163.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z option -> typ option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw3.sml";
[opening hw3.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw3.sml:155.38-162.19 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z list * 'Y list -> typ option
  this rule: typ * typ -> typ option
  in rule:
    (Datatype d1,Datatype d2) => if d1 = d2 then SOME (Datatype d1) else NONE
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:155.39-157.61 Warning: match nonexhaustive
          (nil,nil) => ...
          (t10 :: tt1',t20 :: tt2') => ...
  
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val all_answers2 = fn : ('a -> 'b option) -> 'a list -> 'b list option
val type_lenient = fn : typ * typ -> typ option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:159.25-161.44 Error: operator and operand don't agree [circularity]
  operator domain: 'Z * 'Y
  operand:         'Z list * 'Y list
  in expression:
    type_lenient (tt1',tt2')
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:159.26-161.45 Error: operator and operand don't agree [circularity]
  operator domain: 'Z * 'Y
  operand:         'Z list * 'Y list
  in expression:
    type_lenient (tt1',tt2')
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:159.26-161.45 Error: operator and operand don't agree [circularity]
  operator domain: 'Z * 'Y
  operand:         'Z list * 'Y list
  in expression:
    type_lenient (tt1',tt2')
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:159.26-161.45 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z * 'Y) list
  operand:         'Z list * 'Y list
  in expression:
    (all_answers2 type_lenient) (tt1',tt2')
val it = () : unit
- 

Process sml finished
Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- use "hw3.sml";
[opening hw3.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
hw3.sml:157.52-157.56 Error: unbound variable or constructor: tt2'
hw3.sml:157.46-157.50 Error: unbound variable or constructor: tt1'
hw3.sml:157.19-157.57 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z * 'Y) list
  operand:         _ * _
  in expression:
    (all_answers2 type_lenient) (<errorvar>,<errorvar>)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:157.19-157.55 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z * 'Y) list
  operand:         typ list * typ list
  in expression:
    (all_answers2 type_lenient) (tt1,tt2)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:157.19-157.67 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z * 'Y) list
  operand:         'X list * 'W list -> ('X * 'W) list
  in expression:
    (all_answers2 type_lenient) ListPair.zip
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:157.19-159.44 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z * 'Y) list
  operand:         'X list * 'W list -> ('X * 'W) list
  in expression:
    (all_answers2 type_lenient) ListPair.zip
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val all_answers2 = fn : ('a -> 'b option) -> 'a list -> 'b list option
val type_lenient = fn : typ * typ -> typ option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:184.26-184.28 Error: unbound variable or constructor: cs
hw3.sml:184.19-184.35 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ''Z list
  operand:         _ * string * 'Y
  in expression:
    valid (<errorvar>,s,t)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:167.27 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val all_answers2 = fn : ('a -> 'b option) -> 'a list -> 'b list option
val type_lenient = fn : typ * typ -> typ option
val valid = fn : ''a list -> ''a -> 'b -> 'b option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:184.23-184.30 Error: unbound variable or constructor: patlist
hw3.sml:180.19-180.35 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ''Z list
  operand:         'Y * string * 'X
  in expression:
    valid (cs,s,t)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:180.19-180.35 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ''Z list
  operand:         'Y * string * 'X
  in expression:
    valid (cs,s,t)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:178.33-181.17 Error: match redundant
          NONE => ...
          SOME t => ...
    -->   _ => ...
  
hw3.sml:166.28 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:166.28 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val typecheck_patterns = fn : string list -> pattern list -> typ list option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:164.28 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val typecheck_patterns = fn : string list * pattern list -> typ list option
val it = () : unit
- 
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:183.41 Error: syntax error: replacing  WILD with  SEMICOLON

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:42.54
             ../compiler/TopLevel/interact/evalloop.sml:299.20-299.23
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:183.17-183.51 Error: operator and operand don't agree [tycon mismatch]
  operator domain: typ * typ -> typ
  operand:         typ * typ -> typ option
  in expression:
    List.foldl type_lenient[
val it = () : unit
- List.foldl type_lenient
= ;
stdIn:15.1-15.24 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ?.typ * ?.typ -> ?.typ
  operand:         ?.typ * ?.typ -> ?.typ option
  in expression:
    List.foldl type_lenient
- List.foldl type_lenient;
stdIn:1.2-15.9 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ?.typ * ?.typ -> ?.typ
  operand:         ?.typ * ?.typ -> ?.typ option
  in expression:
    List.foldl type_lenient
- List.foldl type_lenient;
stdIn:1.2-15.9 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ?.typ * ?.typ -> ?.typ
  operand:         ?.typ * ?.typ -> ?.typ option
  in expression:
    List.foldl type_lenient
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:164.32 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val typecheck_patterns = fn
  : ('a * string * 'b) list * pattern list -> typ list option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:164.32 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val typecheck_patterns = fn
  : ('a * string * typ) list * pattern list -> typ list option
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:183.17-183.49 Error: operator and operand don't agree [tycon mismatch]
  operator domain: typ * typ -> typ
  operand:         typ * typ -> typ option
  in expression:
    List.foldl type_lenient
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:183.17-183.56 Error: operator and operand don't agree [tycon mismatch]
  operator domain: typ * typ -> typ
  operand:         typ * typ -> typ option
  in expression:
    List.foldl type_lenient
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:188.22-188.31 Error: unbound variable or constructor: getanswer
hw3.sml:184.5-188.40 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ list -> typ
  this rule: typ list -> _ option
  in rule:
    :: (a,lst') =>
      (case (type_lenient (a,res))
        of NONE => NONE
         | SOME l => <errorvar> (<exp>,<exp>))
hw3.sml:190.8-190.31 Error: operator and operand don't agree [tycon mismatch]
  operator domain: typ
  operand:         _ list
  in expression:
    (get_answer lst) (tl lst)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:184.5-188.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ list -> typ
  this rule: typ list -> 'Z option
  in rule:
    :: (a,lst') =>
      (case (type_lenient (a,res))
        of NONE => NONE
         | SOME l => get_answer (<exp>,<exp>))
hw3.sml:183.26-188.42 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ list * typ
  object: (typ list * typ) * 'Z
  in expression:
    (case (arg,arg)
      of (lst,res) =>
           (case lst
             of nil => res
              | :: <pat> =>
                  (case <exp>
                    of <rule>
                     | <rule>)))
hw3.sml:183.26-188.42 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  'Z -> _
  result type:  'Y option
  in declaration:
    get_answer = (fn arg => (fn <pat> => <exp>))
hw3.sml:190.24-190.30 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list
  operand:         typ list * typ
  in expression:
    tl lst
hw3.sml:190.8-190.31 Error: operator is not a function [tycon mismatch]
  operator: 'Z option
  in expression:
    (get_answer lst) (tl lst)
hw3.sml:181.2-191.7 Error: case object and rules don't agree [tycon mismatch]
  rule domain: (typ list * typ) option
  object: typ list option
  in expression:
    (case ((all_answers2 convert) ps)
      of NONE => NONE
       | SOME lst =>
           let val <pat> = <exp> in (get_answer <exp>) (tl <exp>) end)
val it = () : unit
- val x = [1,2,3];
val x = [1,2,3] : int list
- x[1];
stdIn:23.1-23.5 Error: operator is not a function [tycon mismatch]
  operator: int list
  in expression:
    x (1 :: nil)
- tl x;
val it = [2,3] : int list
- hd x;
val it = 1 : int
- hd x;
val it = 1 : int
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:184.5-188.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ list -> typ
  this rule: typ list -> 'Z option
  in rule:
    :: (a,lst') =>
      (case (type_lenient (a,res))
        of NONE => NONE
         | SOME l => get_answer (<exp>,<exp>))
hw3.sml:183.26-188.42 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ list * typ
  object: (typ list * typ) * 'Z
  in expression:
    (case (arg,arg)
      of (lst,res) =>
           (case lst
             of nil => res
              | :: <pat> =>
                  (case <exp>
                    of <rule>
                     | <rule>)))
hw3.sml:183.26-188.42 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  'Z -> _
  result type:  'Y option
  in declaration:
    get_answer = (fn arg => (fn <pat> => <exp>))
hw3.sml:190.24-190.30 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z list
  operand:         typ list * typ
  in expression:
    hd lst
hw3.sml:190.8-190.31 Error: operator is not a function [tycon mismatch]
  operator: 'Z option
  in expression:
    (get_answer lst) (hd lst)
hw3.sml:181.2-191.7 Error: case object and rules don't agree [tycon mismatch]
  rule domain: (typ list * typ) option
  object: typ list option
  in expression:
    (case ((all_answers2 convert) ps)
      of NONE => NONE
       | SOME lst =>
           let val <pat> = <exp> in (get_answer <exp>) (hd <exp>) end)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:184.5-188.42 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ list -> typ
  this rule: typ list -> 'Z option
  in rule:
    :: (a,lst') =>
      (case (type_lenient (a,res))
        of NONE => NONE
         | SOME l => get_answer (<exp>,<exp>))
hw3.sml:183.26-188.42 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ list * typ
  object: (typ list * typ) * 'Z
  in expression:
    (case (arg,arg)
      of (lst,res) =>
           (case lst
             of nil => res
              | :: <pat> =>
                  (case <exp>
                    of <rule>
                     | <rule>)))
hw3.sml:183.26-188.42 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  'Z -> _
  result type:  'Y option
  in declaration:
    get_answer = (fn arg => (fn <pat> => <exp>))
hw3.sml:190.8-190.31 Error: operator is not a function [tycon mismatch]
  operator: 'Z option
  in expression:
    (get_answer lst) Anything
hw3.sml:181.2-191.7 Error: case object and rules don't agree [tycon mismatch]
  rule domain: (typ list * typ) option
  object: typ list option
  in expression:
    (case ((all_answers2 convert) ps)
      of NONE => NONE
       | SOME lst => let val <pat> = <exp> in (get_answer <exp>) Anything end)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:184.5-189.13 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): typ list -> typ
  this rule: typ list -> 'Z option
  in rule:
    :: (a,lst') =>
      (case (type_lenient (a,res))
        of NONE => NONE
         | SOME l => get_answer (<exp>,<exp>))
hw3.sml:183.26-189.13 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ list * typ
  object: (typ list * typ) * 'Z
  in expression:
    (case (arg,arg)
      of (lst,res) =>
           (case lst
             of nil => res
              | :: <pat> =>
                  (case <exp>
                    of <rule>
                     | <rule>)))
hw3.sml:183.26-189.13 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  'Z -> _
  result type:  'Y option
  in declaration:
    get_answer = (fn arg => (fn <pat> => <exp>))
hw3.sml:191.8-191.31 Error: operator is not a function [tycon mismatch]
  operator: 'Z option
  in expression:
    (get_answer lst) Anything
hw3.sml:181.2-192.7 Error: case object and rules don't agree [tycon mismatch]
  rule domain: (typ list * typ) option
  object: typ list option
  in expression:
    (case ((all_answers2 convert) ps)
      of NONE => NONE
       | SOME lst => let val <pat> = <exp> in (get_answer <exp>) Anything end)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:183.26-189.9 Error: case object and rules don't agree [tycon mismatch]
  rule domain: typ list * typ
  object: (typ list * typ) * 'Z
  in expression:
    (case (arg,arg)
      of (lst,res) =>
           (case lst
             of nil => SOME <exp>
              | :: <pat> =>
                  (case <exp>
                    of <rule>
                     | <rule>)))
hw3.sml:183.26-189.9 Error: right-hand-side of clause doesn't agree with function result type [tycon mismatch]
  expression:  'Z -> _
  result type:  typ option
  in declaration:
    get_answer = (fn arg => (fn <pat> => <exp>))
hw3.sml:191.7-191.30 Error: operator is not a function [tycon mismatch]
  operator: typ option
  in expression:
    (get_answer lst) Anything
hw3.sml:181.2-192.7 Error: case object and rules don't agree [tycon mismatch]
  rule domain: (typ list * typ) option
  object: typ list option
  in expression:
    (case ((all_answers2 convert) ps)
      of NONE => NONE
       | SOME lst => let val <pat> = <exp> in (get_answer <exp>) Anything end)
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:164.32 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val typecheck_patterns = fn
  : ('a * string * typ) list * pattern list -> typ option
val it = () : unit
- typecheck_patterns [("a", "b", IntT)] [TupleP[Variable("x"),Variable("y")], TupleP[Wildcard,Wildcard]];
stdIn:31.1-31.103 Error: operator and operand don't agree [tycon mismatch]
  operator domain: ('Z * string * typ) list * pattern list
  operand:         (string * string * typ) list
  in expression:
    typecheck_patterns (("a","b",IntT) :: nil)
-  typecheck_patterns ([("a", "b", IntT)],[TupleP[Variable("x"),Variable("y")], TupleP[Wildcard,Wildcard]]);
val it = SOME Anything : typ option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:187.21-187.34 Error: unbound variable or constructor: compare_types
val it = () : unit
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:164.32 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val typecheck_patterns = fn
  : ('a * string * typ) list * pattern list -> typ option
val it = () : unit
-  typecheck_patterns ([("a", "b", IntT)],[TupleP[Variable("x"),Variable("y")], TupleP[Wildcard,Wildcard]]);
val it = SOME Anything : typ option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:164.32 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val typecheck_patterns = fn
  : ('a * string * typ) list * pattern list -> typ option
val it = () : unit
-  typecheck_patterns ([("a", "b", IntT)],[TupleP[Variable("x"),Variable("y")], TupleP[Wildcard,Wildcard]]);
val it = SOME Anything : typ option
- use "hw3.sml";
[opening hw3.sml]
hw3.sml:165.32 Warning: calling polyEqual
hw3.sml:99.43 Warning: calling polyEqual
exception NoAnswer
val only_capitals = fn : string list -> string list
val longest_string1 = fn : string list -> string
val longest_string2 = fn : string list -> string
val longest_string_helper = fn : (int * int -> bool) -> string list -> string
val longest_string3 = fn : string list -> string
val longest_string4 = fn : string list -> string
val longest_capitalized = fn : string list -> string
val rev_string = fn : string -> string
val first_answer = fn : ('a -> 'b option) -> 'a list -> 'b
val all_answers = fn : ('a -> 'b list option) -> 'a list -> 'b list option
datatype pattern
  = ConstP of int
  | ConstructorP of string * pattern
  | TupleP of pattern list
  | UnitP
  | Variable of string
  | Wildcard
datatype valu
  = Const of int | Constructor of string * valu | Tuple of valu list | Unit
val g = fn : (unit -> int) -> (string -> int) -> pattern -> int
val count_wildcards = fn : pattern -> int
val count_wild_and_variable_lengths = fn : pattern -> int
val count_some_var = fn : string * pattern -> int
val check_pat = fn : pattern -> bool
val match = fn : valu * pattern -> (string * valu) list option
val first_match = fn : valu -> pattern list -> (string * valu) list option
datatype typ
  = Anything | Datatype of string | IntT | TupleT of typ list | UnitT
val typecheck_patterns = fn
  : ('a * string * typ) list * pattern list -> typ option
val it = () : unit
- 